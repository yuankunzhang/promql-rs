promql   = _{ SOI ~ expr? ~ EOI}

expr     = { prefix* ~ primary ~ postfix* ~ (infix ~ prefix* ~ primary ~ postfix*)* }

prefix   = _{ neg | pos }
neg      = { "-" }
pos      = { "+" }

postfix  = _{ matrix | subquery }
matrix   = { "[" ~ duration ~ "]" }
subquery = { "[" ~ duration ~ ":" ~ duration? ~ "]" }

infix    = _{ add | sub | mul | div | mod | pow | eq | ne | le | lt | ge | gt | and | or | unless | atan2 }

add      = { _add ~ bin_modifier? }
sub      = { _sub ~ bin_modifier? }
mul      = { _mul ~ bin_modifier? }
div      = { _div ~ bin_modifier? }
mod      = { _mod ~ bin_modifier? }
pow      = { _pow ~ bin_modifier? }
eq       = { _eq ~ bin_modifier? }
ne       = { _ne ~ bin_modifier? }
le       = { _le ~ bin_modifier? }
lt       = { _lt ~ bin_modifier? }
ge       = { _ge ~ bin_modifier? }
gt       = { _gt ~ bin_modifier? }
and      = { _and ~ bin_modifier? }
or       = { _or ~ bin_modifier? }
unless   = { _unless ~ bin_modifier? }
atan2    = { _atan2 ~ bin_modifier? }

_add     = { "+" }
_sub     = { "-" }
_mul     = { "*" }
_div     = { "/" }
_mod     = { "%" }
_pow     = { "^" }
_eq      = { "==" }
_ne      = { "!=" }
_le      = { "<=" }
_lt      = { "<" }
_ge      = { ">=" }
_gt      = { ">" }
_and     = { "and" }
_or      = { "or" }
_unless  = { "unless" }
_atan2   = { "atan2" }

bin_modifier            = { (bool_modifier ~ group_modifiers?) | group_modifiers }
bool_modifier           = { "bool" }
group_modifiers         = _{ on_or_ignoring_modifier ~ left_or_right_modifier? }
on_or_ignoring_modifier = { on_or_ignoring ~ grouping_labels }
on_or_ignoring          = { "on" | "ignoring" }
left_or_right_modifier  = { left_or_right ~ grouping_labels? }
left_or_right           = { "group_left" | "group_right" }

primary = _{
    aggregate_expr
    | function_call
    | number_literal
    | paren_expr
    | string_literal
    | vector_selector
}

aggregate_expr = { aggregate_op ~ aggregate_body }
aggregate_op   = {
    "avg"
    | "bottomk"
    | "count_values"
    | "count"
    | "group"
    | "max"
    | "min"
    | "quantile"
    | "stddev"
    | "stdvar"
    | "sum"
    | "topk"
}
aggregate_body = _{
    (aggregate_modifier ~ function_call_body)
    | (function_call_body ~ aggregate_modifier?)
}

aggregate_modifier    = { aggregate_modifier_op ~ grouping_labels }
aggregate_modifier_op = { "by" | "without" }

function_call      = { function_call_name ~ function_call_body }
function_call_body = _{ "(" ~ function_call_args? ~ ")" }
function_call_args = { expr ~ ("," ~ expr)* }
function_call_name = {
    "absent_over_time"
    | "absent"
    | "abs"
    | "ceil"
    | "changes"
    | "clamp_max"
    | "clamp_min"
    | "clamp"
    | "day_of_month"
    | "day_of_week"
    | "day_of_year"
    | "days_in_month"
    | "delta"
    | "deriv"
    | "exp"
    | "floor"
    | "histogram_count"
    | "histogram_sum"
    | "histogram_fraction"
    | "histogram_quantile"
    | "holt_winters"
    | "hour"
    | "idelta"
    | "increase"
    | "irate"
    | "label_join"
    | "label_replace"
    | "ln"
    | "log2"
    | "log10"
    | "minute"
    | "month"
    | "predict_linear"
    | "rate"
    | "resets"
    | "round"
    | "scalar"
    | "sgn"
    | "sort_desc"
    | "sort"
    | "sqrt"
    | "timestamp"
    | "time"
    | "vector"
    | "year"
    // aggregation functions
    | "avg_over_time"
    | "count_over_time"
    | "max_over_time"
    | "min_over_time"
    | "quantile_over_time"
    | "stddev_over_time"
    | "stdvar_over_time"
    | "sum_over_time"
    | "last_over_time"
    | "present_over_time"
    // trigonometric functions
    | "acosh"
    | "acos"
    | "asinh"
    | "asin"
    | "atanh"
    | "atan"
    | "cosh"
    | "cos"
    | "sinh"
    | "sin"
    | "tanh"
    | "tan"
    | "deg"
    | "pi"
    | "rad"
}

paren_expr = { "(" ~ expr ~ ")" }

vector_selector    = { (metric ~ label_matchers?) | label_matchers }
metric             = { identifier }
label_matchers     = { "{" ~ label_matcher_list? ~ "}" }
label_matcher_list = _{ label_matcher_item ~ ("," ~ label_matcher_item)* }
label_matcher_item = { identifier ~ match_op ~ string }
match_op           = { "!=" | "=~" | "!~" | "=" }

grouping_labels       = _{ "(" ~ grouping_label_list? ~ ")" }
grouping_label_list   = _{ grouping_label_item ~ ("," ~ grouping_label_item)* }
grouping_label_item   = _{ identifier }

duration = {
    duration_millisecond
    | duration_second
    | duration_minute
    | duration_hour
    | duration_day
    | duration_week
    | duration_year
}
duration_year = @{ int ~ "y" ~ (
    duration_millisecond
    | duration_second
    | duration_minute
    | duration_hour
    | duration_day
    | duration_week
)? }
duration_week = @{ int ~ "w" ~ (
    duration_millisecond
    | duration_second
    | duration_minute
    | duration_hour
    | duration_day
)? }
duration_day = @{ int ~ "d" ~ (
    duration_millisecond
    | duration_second
    | duration_minute
    | duration_hour
)? }
duration_hour = @{ int ~ "h" ~ (
    duration_millisecond
    | duration_second
    | duration_minute
)? }
duration_minute = @{ int ~ "m" ~ (
    duration_millisecond
    | duration_second
)? }
duration_second = @{ int ~ "s" ~ (
    duration_millisecond
)? }
duration_millisecond = @{ int ~ "ms" }

number_literal = { number }

number = @{ ("+" | "-")? ~ (hex | oct | dec | nan | inf)}
hex    = @{ "0" ~ ("x" | "X") ~ ASCII_HEX_DIGIT+ }
oct    = @{ "0" ~ ('0'..'7')+ }
dec    = @{ (int ~ frac? ~ exp?) | (frac ~ exp?) }
frac   = @{ "." ~ ASCII_DIGIT* ~ exp? }
int    = @{ "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
exp    = @{ ("E" | "e") ~ ("+" | "-")? ~ ASCII_DIGIT+ }
nan    = @{ ("N" | "n") ~ ("A" | "a") ~ ("N" | "n") }
inf    = @{ ("I" | "i") ~ ("N" | "n") ~ ("F" | "f") }

string_literal = { string }

string              = _{ double_quoted | single_quoted }
double_quoted       = _{ "\"" ~ double_quoted_inner ~ "\"" }
single_quoted       = _{ "'" ~ single_quoted_inner ~ "'" }
double_quoted_inner = @{ ((!("\"" | "\\") ~ ANY) | escape)* }
single_quoted_inner = @{ ((!("'" | "\\") ~ ANY) | escape)* }

escape  = @{ "\\" ~ ("\\" | "\"" | "'" | "/" | "a" | "b" | "f" | "n" | "r" | "t" | "v" | unicode) }
unicode = @{
    ('0'..'7'{3})
    | ("x" ~ ASCII_HEX_DIGIT{2})
    | ("u" ~ ASCII_HEX_DIGIT{4})
    | ("U" ~ ASCII_HEX_DIGIT{8})
}

identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }